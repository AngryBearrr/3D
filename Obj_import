#include <QCoreApplication>
#include <iostream>
#include <QVector3D>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
using namespace std;
vector<QVector3D>vertices;
vector<QVector3D>normals;
vector<QVector2D>UVw;
vector<vector<int>>PolyVertexInd;
vector<vector<int>>PolyUVInd;
vector<vector<int>>PolyNormalInd;
int test(string word) //функция для проверки трех вариантов : без uv, без нормали и со всем, возвращает интовую К для дальнейшего использования в свитче.
{
    int k;
    size_t size=word.find("/");
    size_t l_size=word.find_last_of("/");
    if (size==l_size)
    {
        k=0;                                  // "***/***"
    }
    else
    {
        if (size==l_size-1)
        {
            k=1;                              //  "***//***"
        }
        else
        {
            k=2;                              //  "***/***/***
        }
    }
    return k;
}
void import()
{
    cout << "enter file name" << endl;
    string name;
    cin >> name;
    string directory="C:\\Users\\Kirill\\Desktop\\3dfiles\\";
    directory+=name+".obj";
    ifstream import (directory);
    if (!import.is_open())
    {
        cout << "can't open the file, try again" << endl;
        abort();
    }
    else
    {
        while (!import.eof())
        {
            string line;
            import >> line;
            if (line=="v") //на всем кроме f одинаковый влгоритм-создается временный вектор, и с помощью push_back записывается в массив.
            {
                QVector3D temp;
                for (int i=0; i<3;i++)
                {
                    import >> line;
                    temp[i]=stof(line);
                }
                vertices.push_back(temp);
            }
            if (line=="vt")
            {
                QVector2D temp;
                for (int i=0; i<2;i++)
                {
                    import >> line;
                    temp[i]=stof(line);
                }
                UVw.push_back(temp);
            }
            if (line=="vn")
            {
                QVector3D temp;
                for (int i=0; i<3;i++)
                {
                    import >> line;
                    temp[i]=stof(line);
                }
                normals.push_back(temp);
            }
            if (line=="f")
            {
                string temp;
                getline (import,temp);
                int n=0;
                stringstream ss(temp);
                stringstream counter(temp);
                string ctr; //подсчет "слов" в строке
                while (counter>>ctr)
                    n++;
                vector<int>vertex;
                vector<int>uv;
                vector<int>normal;
                for (int i=0; i<n;i++)
                {
                    ss>>line;
                    int n=test(line);
                    replace(line.begin(), line.end(), '/', ' ');
                    stringstream var(line);
                    string number;
                    switch (n) //свитч для всех предусмотренных вариантов файлов.
                    {
                    case 0:
                        var>>number;
                        vertex.push_back(stoi(number));
                        var>>number;
                        uv.push_back(stoi(number));
                        break;
                    case 1:
                        var>>number;
                        vertex.push_back(stoi(number));
                        var>>number;
                        normal.push_back(stoi(number));
                        break;
                    case 2:
                        var>>number;
                        vertex.push_back(stoi(number));
                        var>>number;
                        uv.push_back(stoi(number));
                        var>>number;
                        normal.push_back(stoi(number));
                        break;
                    }
                }
                PolyVertexInd.push_back(vertex);
                PolyUVInd.push_back(uv);
                PolyNormalInd.push_back(normal);
            }
        }
    }

}
void out(vector<vector<int>>vector) //перегруженные функции на вывод всей нужной информации для проверок
{
    for (int i=0; i<vector.size(); i++)
    {
        for (int j=0; j<vector[i].size();j++)
            cout << vector[i][j] << ";" ;
        cout << endl;
    }
}
void out (vector<QVector3D>vector)
{
    for (int i=0; i<vector.size();i++)
    {
        cout << vector[i][0] << "," << vector[i][1] << "," << vector[i][2] << ";" << endl;
    }
}
void out (vector<QVector2D>vector)
{
    for (int i=0; i<vector.size();i++)
    {
        cout << vector[i][0] << "," << vector[i][1] << ";" << endl;
    }
}
int main()
{
    import();
    cout << "what do you want to know?" << endl;
    cout << "1-vertices" << endl;
    cout << "2-UVws" << endl;
    cout << "3-normals" << endl;
    cout << "4-vertex indicies" << endl;
    cout << "5-UVw indicies" << endl;
    cout << "6-normal indicies" << endl;
    cout << "7-exit" << endl;
    int var;
    bool input=false;
    while (input==false) //зацикленный вывод инормации о модели.
    {
        cin >> var;
        switch (var)
        {
        case 1:
            out (vertices);
            break;
        case 2:
            out (UVw);
            break;
        case 3:
            out (normals);
            break;
        case 4:
            out (PolyVertexInd);
            break;
        case 5:
            out(PolyUVInd);
            break;
        case 6:
            out (PolyNormalInd);
            break;
        case 7:
            input=true;
            break;
        default:
            cout << "wrong input, try again" << endl;
            break;
        }
    }
}

